// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package jp.dip.hakuro.twitserif.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import jp.dip.hakuro.twitserif.domain.Serifs;
import jp.dip.hakuro.twitserif.domain.SerifsDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect SerifsDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SerifsDataOnDemand: @Component;
    
    private Random SerifsDataOnDemand.rnd = new SecureRandom();
    
    private List<Serifs> SerifsDataOnDemand.data;
    
    public Serifs SerifsDataOnDemand.getNewTransientSerifs(int index) {
        Serifs obj = new Serifs();
        setCreatedAt(obj, index);
        setId(obj, index);
        setImageUrl(obj, index);
        setScreenName(obj, index);
        setText(obj, index);
        return obj;
    }
    
    public void SerifsDataOnDemand.setCreatedAt(Serifs obj, int index) {
        Date createdAt = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedAt(createdAt);
    }
    
    public void SerifsDataOnDemand.setId(Serifs obj, int index) {
        String id = "id_" + index;
        obj.setId(id);
    }
    
    public void SerifsDataOnDemand.setImageUrl(Serifs obj, int index) {
        String imageUrl = "imageUrl_" + index;
        obj.setImageUrl(imageUrl);
    }
    
    public void SerifsDataOnDemand.setScreenName(Serifs obj, int index) {
        String screenName = "screenName_" + index;
        obj.setScreenName(screenName);
    }
    
    public void SerifsDataOnDemand.setText(Serifs obj, int index) {
        String text = "text_" + index;
        if (text.length() > 140) {
            text = text.substring(0, 140);
        }
        obj.setText(text);
    }
    
    public Serifs SerifsDataOnDemand.getSpecificSerifs(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Serifs obj = data.get(index);
        Long id = obj.getId_();
        return Serifs.findSerifs(id);
    }
    
    public Serifs SerifsDataOnDemand.getRandomSerifs() {
        init();
        Serifs obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId_();
        return Serifs.findSerifs(id);
    }
    
    public boolean SerifsDataOnDemand.modifySerifs(Serifs obj) {
        return false;
    }
    
    public void SerifsDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Serifs.findSerifsEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Serifs' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Serifs>();
        for (int i = 0; i < 10; i++) {
            Serifs obj = getNewTransientSerifs(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
